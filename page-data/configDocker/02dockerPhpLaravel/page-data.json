{"componentChunkName":"component---node-modules-gatsby-theme-document-src-templates-docs-js","path":"/configDocker/02dockerPhpLaravel","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Docker Laravel 7 - Php 7.4 - Mysql 5.7\",\n  \"description\": \"Sessão destinada a explicar o docker compose do laravel\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Essa Sess\\xE3o tem como trabalho, explicar como configurar o docker compose,\\npara instala\\xE7\\xE3o de um container confiurado para rodar, um sistema com php 7.4\\ne mysql 5.7 j\\xE1 configurados. O reposit\\xF3rio oficial est\\xE1 neste link, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/sport129/dockerFileLaravel\"\n  }), \"Docker\"), \".\"), mdx(\"h3\", {\n    \"id\": \"glossário\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Gloss\\xE1rio\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"- app: Nome do nosso servi\\xE7o, ele \\xE9 um novo que voc\\xEA pode atribuir a gosto,\\nele ser\\xE1 o nome caso precisemos linkar ele a algum outro servi\\xE7o, \\xE9 nome que\\ncont\\xE9m as informa\\xE7\\xF5es daquele servi\\xE7o.\\n\\n- build: Configura\\xE7\\xE3o que, no momento que inicializar o docker, ele ir\\xE1 executar\\ncomandos, para instalar servi\\xE7os adicionoais para aquele servi\\xE7o, no caso, ir\\xE1 \\ninstalar dependencias somente para o servi\\xE7o app.\\n\\n- ports: Defimos quais s\\xE3o as portas que o docker ir\\xE1 sincronizar entre nossa maquina\\ne o docker. A esquerda do dois pontos \\xE9 a porta que o nosso sistema deve liberar e a direita\\ndo ponto e virgula \\xE9 a porta que o docker ir\\xE1 utilizar.\\n\\n- context: O local que definimos, que ir\\xE1 ficar o nosso arquivo de script\\n\\n- dockerfile: nome do arquivo de script\\n\\n- user: para definir qual o usu\\xE1rio que tem permiss\\xE3o nesse docker, para saber\\no id do usu\\xE1rio do seu sistema basta executar o seguinte comando:\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ echo $UID\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"- image: Define qual imagem iremos utilizar para instalar o php.\\n\\n- container_name: define um nome para o nosso container, isso serve para \\ndividir os nossos diversos container, de diversas outras configura\\xE7\\xF5es.\\n\\n- restart: Diz para o docker, que sempre que o sistema iniciar, este docker\\ntamb\\xE9m dever ser iniciado junto ao sistema.\\n\\n- environment: Onde definimos vari\\xE1veis de ambiente para o nosso servi\\xE7o.\\n\\n- working_dir: Definimos o local de trabalho que o docker ir\\xE1 atuar no seu container, diretorio dentro do container.\\n\\n- volumes: Onde definimos, quais s\\xE3o os diret\\xF3rios que meu container ir\\xE1 escutar, ou ir\\xE1 ter acesso. A esquerda\\ndo ponto e virgula \\xE9 definido qual o path que o docker ir\\xE1 utilizar, neste \\xE9 o path do sistema do usu\\xE1rio e a\\ndireita do ponto e virgula fica em qual path do docker ele ir\\xE1 linkar.\\n\")), mdx(\"h3\", {\n    \"id\": \"criando-o-ambiente-docker\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Criando o ambiente docker\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Criar Uma pasta que ir\\xE1 concentrar seus dockers:\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Essa pasta pode ser criada em qualquer local do seu computador, por\\xE9m,\\npara ficar pr\\xE1tico, iremos criar essa pasta na raiz do sistema ou\\nespecificando no diretorio \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/\"), \". Para criar uma pasta basta abrir seu\\nterminal e executar o seguinte comando: \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ mkdir Dockers\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Entrar na pasta Dockers e Criar Novo Repositorio\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Por motivo de organiza\\xE7\\xE3o iremos criar uma nova pasta, para que nela fique\\nconcentrado as nossas configura\\xE7\\xF5es do docker.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ cd Dockers && mkdir dockerLaravel && cd dockerLaravel\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Dentro da pasta dockerLaravel crie o arquivo docker-compose.yml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ touch docker-compose.yml\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Se voc\\xEA j\\xE1 possuir o vscode instalado em sua maquina, basta executar o seguinte\\ncomando para abrir o vscode na pasta atual:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ code .\\n\")))), mdx(\"h3\", {\n    \"id\": \"configurando-o-docker-composeyml\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Configurando o docker-compose.yml\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Configurando a vers\\xE3o e dizendo os servi\\xE7os\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Com o arquivo aberto devemos escrever a vers\\xE3o e os servi\\xE7os, basta adicionar\\nno inicio do arquivo a seguinte informa\\xE7\\xE3o:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"version: '3'\\nservices:\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Estamos dizendo para o nosso docker que iremos utilizar a versao 3, e que iremos utilizar\\nos seguintes servi\\xE7os, quando ele for iniciado.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Sevi\\xE7o php\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Abaixo de services devemos adicionar as seguintes informa\\xE7\\xF5es:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"  #PHP Service\\n  app:\\n    build:\\n      context: ./image/php\\n      dockerfile: Dockerfile\\n    user: 1000:1000\\n    image: digitalocean.com/php\\n    container_name: app\\n    restart: unless-stopped\\n    tty: true\\n    environment:\\n      SERVICE_NAME: app\\n      SERVICE_TAGS: dev\\n      XDEBUG_CONFIG: remote_host=172.17.0.1\\n      PHP_IDE_CONFIG: serverName=localhost\\n    working_dir: /var/www\\n    volumes:\\n      - /var/www:/var/www\\n      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini\\n    networks:\\n      - app-network\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Em context estamos definindo qual \\xE9 o path que ir\\xE1 ficar o nosso dockerfile, para quando\\no container for inicializado ele dever\\xE1 rodar um script para instalar dependencias a este container.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"dockerfile definimos o nome do arquivo que ir\\xE1 executar o nosso script.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Para o funcionamento de debug do php, definimos duas vari\\xE1veis de ambiente que o docker ir\\xE1 utlizar.\\nDefinimos qual \\xE9 o ip remoto que o xdebug ir\\xE1 acessar em \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"XDEBUG_CONFIG\"), \", e dizemos qual \\xE9 o nome do servidor\\nlocal que a ide ir\\xE1 utilizar em \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PHP_IDE_CONFIG\"), \".\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Configurando local.ini\"), mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Devemos criar o seguinte diret\\xF3rio dentro da nossa pasta, abra o terminal e execute:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ mkdir \\\"php\\\"\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Este comando deve criar esse path. \")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Dentro da pasta \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"php\"), \" devemos criar o arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"local.ini\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ touch local.ini\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Dizemos as configura\\xE7\\xF5es do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"php\"), \", que o docker ir\\xE1 utilizar\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"memory_limit = 1512M\\ndate.timezone = America/Sao_Paulo\\nmax_execution_time = 3600\\nmax_input_time = 3600\\n\\nupload_max_filesize=40M\\npost_max_size=40M\\n\\nerror_reporting = E_ALL\\ndisplay_errors = on\\n\\nmax_allowed_packet=524288000\\nwait_timeout = 3600\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Esse arquivo, \\xE9 como se fosse as confira\\xE7\\xF5es do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"php.ini\"), \", quando instalamos\\no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"php\"), \" em nossa m\\xE1quina.\")))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Servi\\xE7o Nginx\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#Nginx Service\\n  webserver:\\n  image: nginx:alpine\\n  container_name: webserver\\n  restart: unless-stopped\\n  tty: true\\n  ports:\\n    - \\\"80:80\\\"\\n    - \\\"443:443\\\"\\n  volumes:\\n    - /var/www:/var/www\\n    - ./nginx/conf.d/:/etc/nginx/conf.d/\\n  networks:\\n    - app-network\\n  links:\\n    - \\\"app\\\"\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Definimos que o nosso docker ir\\xE1 utilizar o servi\\xE7o do nginx.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Defimos que o nginx ir\\xE1 utilizar a porta \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"80\"), \" e a porta \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"443\"), \", para servi\\xE7os\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTTP\"), \" e \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTTPs\"), \". \"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"E dizemos que esse servi\\xE7o est\\xE1 linkado com o servi\\xE7o app. Nosso servi\\xE7o de php.\"), mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Criar o pah \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nginx/conf.d\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ mkdir \\\"nginx/conf.d\\\"\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Criar o arquivo app.conf\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ touch app.conf\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Dentro de app.conf colocar as seguinte informa\\xE7\\xF5es:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"server {\\n  listen 80;\\n  index index.php index.html index.htm;\\n  error_log  /var/log/nginx/error.log;\\n  access_log /var/log/nginx/access.log;\\n  root /var/www/html/bleezPilotLaravel/public;\\n  location ~ \\\\.php$ {\\n      try_files $uri =404;\\n      fastcgi_split_path_info ^(.+\\\\.php)(/.+)$;\\n      fastcgi_pass app:9000;\\n      fastcgi_index index.php;\\n      include fastcgi_params;\\n      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\\n      fastcgi_param PATH_INFO $fastcgi_path_info;\\n  }\\n  location / {\\n      try_files $uri $uri/ /index.php?$query_string;\\n      gzip_static on;\\n  }\\n}\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Aqui fica definido quais configura\\xE7\\xF5es o nginx ir\\xE1 utilizar. A unica coisa\\na se atentar nessa configura\\xE7\\xE3o \\xE9 a variavel chamada root, pois ela \\xE9 quem diz\\nqual \\xE9 o diret\\xF3rio raiz que ir\\xE1 escutar.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Neste exemplo est\\xE1 sendo dito que o diret\\xF3rio raiz \\xE9 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/var/www/html/bleezPilotLaravel/public\"), \",\\npor\\xE9m \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bleezPilotLaravel\"), \" pode ser substituido pelo nome da pasta que est\\xE1 instalado a sua\\naplica\\xE7\\xE3o laravel.\")))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Servi\\xE7o Mysql\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#MySQL Service\\n  db:\\n    image: mysql:5.7.22\\n    container_name: db\\n    restart: unless-stopped\\n    tty: true\\n    ports:\\n      - \\\"3306:3306\\\"\\n    environment:\\n      MYSQL_DATABASE: laravel\\n      MYSQL_ROOT_PASSWORD: root\\n      SERVICE_TAGS: dev\\n      SERVICE_NAME: mysql\\n    volumes:\\n      - dbdata:/var/lib/mysql\\n      - ./mysql/my.cnf:/etc/mysql/my.cnf\\n    networks:\\n      - app-network\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Definimos o nome do banco que ele ir\\xE1 criar ao executar \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MYSQL_DATABASE\"), \" e definimos a senha\\npadr\\xE3o do usu\\xE1rio root de nosso servi\\xE7o em \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MYSQL_ROOT_PASSWORD\"), \".\"), mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Criar o pah \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mysql\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ mkdir \\\"mysql\\\"\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Criar o arquivo my.cnf\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ touch my.cnf\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Dentro de my.cnf colocar as seguinte informa\\xE7\\xF5es:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"[mysqld]\\ngeneral_log = 1\\ngeneral_log_file = /var/lib/mysql/general.log\\n\"))))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Linkar os seri\\xE7os e definir o driver local\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#Docker Networks\\n  networks:\\n    app-network:\\n      driver: bridge\\n  volumes:\\n    dbdata:\\n      driver: local\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Por fim seu arquivo dever\\xE1 ter ficado da seguinte maneira:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"version: '3'\\nservices:\\n\\n  #PHP Service\\n  app:\\n    build:\\n      context: ./image/php\\n      dockerfile: Dockerfile\\n    user: 1000:1000\\n    image: digitalocean.com/php\\n    container_name: app\\n    restart: unless-stopped\\n    tty: true\\n    environment:\\n      SERVICE_NAME: app\\n      SERVICE_TAGS: dev\\n      XDEBUG_CONFIG: remote_host=172.17.0.1\\n      PHP_IDE_CONFIG: serverName=localhost\\n    working_dir: /var/www\\n    volumes:\\n      - /var/www:/var/www\\n      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini\\n    networks:\\n      - app-network\\n\\n  #Nginx Service\\n  webserver:\\n    image: nginx:alpine\\n    container_name: webserver\\n    restart: unless-stopped\\n    tty: true\\n    ports:\\n      - \\\"80:80\\\"\\n      - \\\"443:443\\\"\\n    volumes:\\n      - /var/www:/var/www\\n      - ./nginx/conf.d/:/etc/nginx/conf.d/\\n    networks:\\n      - app-network\\n    links:\\n      - \\\"app\\\"\\n\\n  #MySQL Service\\n  db:\\n    image: mysql:5.7.22\\n    container_name: db\\n    restart: unless-stopped\\n    tty: true\\n    ports:\\n      - \\\"3306:3306\\\"\\n    environment:\\n      MYSQL_DATABASE: laravel\\n      MYSQL_ROOT_PASSWORD: root\\n      SERVICE_TAGS: dev\\n      SERVICE_NAME: mysql\\n    volumes:\\n      - dbdata:/var/lib/mysql\\n      - ./mysql/my.cnf:/etc/mysql/my.cnf\\n    networks:\\n      - app-network\\n\\n#Docker Networks\\nnetworks:\\n  app-network:\\n    driver: bridge\\nvolumes:\\n  dbdata:\\n    driver: local\\n\")))), mdx(\"h3\", {\n    \"id\": \"criar-dockerfile\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Criar Dockerfile\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Criar path\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ mkdir \\\"image/php\\\"\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Criar arquivo Dockerfile\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ touch Dockerfile\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Colocar as seguintes informa\\xE7\\xF5es\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"FROM devilbox/php-fpm-7.4:latest\\n\\n# Set working directory\\nWORKDIR /var/www\\n\\nRUN mkdir -p html/Test;\\n\\nRUN apt-get update && apt-get install -y \\\\\\n    build-essential \\\\\\n    mariadb-client \\\\\\n    libpng-dev \\\\\\n    libjpeg62-turbo-dev \\\\\\n    libfreetype6-dev \\\\\\n    locales \\\\\\n    zip \\\\\\n    jpegoptim optipng pngquant gifsicle \\\\\\n    vim \\\\\\n    unzip \\\\\\n    git \\\\\\n    curl \\\\\\n    libonig-dev \\\\\\n    libzip-dev \\\\\\n    libmcrypt-dev\\n\\nRUN pecl install redis-5.1.0\\n\\n# Clear cache\\nRUN apt-get clean && rm -rf /var/lib/apt/lists/*\\n\\n# Install extensions\\nRUN docker-php-ext-install pdo_mysql mbstring zip exif pcntl\\nRUN docker-php-ext-configure gd --with-gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-png-dir=/usr/include/\\nRUN docker-php-ext-install gd\\nRUN pecl install mcrypt-1.0.3\\n\\n# Install composer\\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\\n\\n# Add user for laravel application\\nRUN groupadd -g 1000 www\\nRUN useradd -u 1000 -ms /bin/bash -g www www\\n\\n# Copy existing application directory contents\\nCOPY . /var/www\\n\\n# Copy existing application directory permissions\\nCOPY --chown=www:www . /var/www\\n\\n# Change current user to www\\nUSER www\\n\\n# Expose port 9000 and start php-fpm server\\nEXPOSE 9000\\nEXPOSE 80 443\\nCMD [\\\"php-fpm\\\"]\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"O docker file ir\\xE1 executar esse script, para instalar seri\\xE7os dentro do nosso servi\\xE7o de php.\"))), mdx(\"h3\", {\n    \"id\": \"configurando-o-laravel\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Configurando o Laravel\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Abra o terminal e se desloque at\\xE9 a pasta html\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ cd /var/www/html\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Clone o Repositorio\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$git clone https://github.com/sport129/bleezPilot bleezPilotLaravel\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"D\\xEA permiss\\xE3o ao usu\\xE1rio\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ sudo chown -R $USER:$USER /var/www/\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Entre na pasta \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bleezPilotLaravel\"), \" e ajuste o env\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ cd bleezPilotLaravel && sudo cp .env.example .env\\n\")))), mdx(\"h3\", {\n    \"id\": \"iniciando-o-docker-e-instalando-as-dependencias-do-laravel\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Iniciando o Docker e Instalando as Dependencias do Laravel\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"V\\xE1 at\\xE9 a pasta que instalou o docker\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ cd ~/Dockers/dockerLaravel\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Execute o comando para instalar o container\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ docker-compose build\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A instala\\xE7\\xE3o deve demorar alguns minutos, n\\xE3o se assute.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Subir os servi\\xE7os do docker, execute o comando\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ docker-compose up -d\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"D\\xEA o compose install dentro da pasta do laravel\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ docker-compose exec app composer install -d /var/www/html/bleezPilotLaravel\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Gere a chave privada do laravel\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose exec app php /var/www/html/bleezPilotLaravel/artisan key:generate\\n\")))), mdx(\"p\", null, \"Com tudo isso feito, basta digitar \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost\"), \" em seu navegador e seu laravel j\\xE1 est\\xE1 devidamente\\nconfigurado e pronto para uso.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#glossário","title":"Glossário"},{"url":"#criando-o-ambiente-docker","title":"Criando o ambiente docker"},{"url":"#configurando-o-docker-composeyml","title":"Configurando o docker-compose.yml"},{"url":"#criar-dockerfile","title":"Criar Dockerfile"},{"url":"#configurando-o-laravel","title":"Configurando o Laravel"},{"url":"#iniciando-o-docker-e-instalando-as-dependencias-do-laravel","title":"Iniciando o Docker e Instalando as Dependencias do Laravel"}]},"frontmatter":{"title":"Docker Laravel 7 - Php 7.4 - Mysql 5.7","description":"Sessão destinada a explicar o docker compose do laravel"}}},"pageContext":{"id":"8328e42e-a4e9-510f-be8c-dfbed5527f10"}}}